<UserControl x:Class="ChatGPTExtension.GptToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"                   
             xmlns:controls="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
             Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"             
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="400"
             PreviewKeyDown="UserControl_PreviewKeyDown"
             Name="ChatGPTWindowControl">

    <Grid>
        <!-- Define styles for buttons and checkbox -->
        <Grid.Resources>
            <!-- Style for the buttons -->
            <Style TargetType="Button" x:Key="CustomButtonStyle">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                <Setter Property="Height" Value="26"/>

                <!-- Important Margin -->
                <Setter Property="Margin" Value="-1,-1,0,0"/>
                <!-- /Important Margin -->

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}" BorderThickness="1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarHoverOverSelectedKey}}"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- ToggleSwitch Style for CheckBox -->
            <Style TargetType="CheckBox" x:Key="CustomCheckBoxStyle">
                <Setter Property="Margin" Value="0,0,0,0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                <!-- <Setter Property="FontSize" Value="11"/> -->
                <Setter Property="FontSize" Value="10"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <!-- Toggle switch part -->
                                <Border Grid.Column="0" Background="#343541" BorderBrush="#343541" BorderThickness="1" CornerRadius="7" Height="14" Width="26" VerticalAlignment="Center">
                                    <Grid>
                                        <Rectangle x:Name="BackgroundRect" Fill="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}" RadiusX="7" RadiusY="7" />
                                        <Ellipse x:Name="SwitchCircle" Fill="White" Width="12" Height="12" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="1"/>
                                    </Grid>
                                </Border>

                                <!-- Text part -->
                                <TextBlock Grid.Column="1" Text="{TemplateBinding Content}" VerticalAlignment="Center" Margin="8,0,0,0" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="BackgroundRect" Property="Fill" Value="#4CC2FF"/>
                                    <Setter TargetName="SwitchCircle" Property="HorizontalAlignment" Value="Right"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- WebView2 Control -->
        <controls:WebView2 Grid.Row="0" Grid.Column="0" Name="webView" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />

        <!-- Button Grid with 3 rows -->
        <!-- <Grid Grid.Row="1" Margin="0,5"> -->
        <Grid Grid.Row="1" Margin="0,1,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!--Margin="-1,-1,-1,0" Margin from the button on the right side -->

            <!-- Row 1 - 3 buttons using all space -->
            <Button Grid.Row="0" Grid.Column="0" Name="btnVSNETToAI" Content="Editor to Claude" Click="OnSendCodeButtonClick" Tag="btnVSNETToAI" Style="{StaticResource CustomButtonStyle}"/>
            <Button Grid.Row="0" Grid.Column="1" Name="btnFixCodeInAI" Content="Fix Code" Click="OnSendCodeButtonClick" Tag="" Style="{StaticResource CustomButtonStyle}"/>
            <Button Grid.Row="0" Grid.Column="2" Name="btnImproveCodeInAI" Content="Improve Code" Click="OnSendCodeButtonClick" Tag="" Style="{StaticResource CustomButtonStyle}" Margin="-1,-1,-1,0"/>

            <!-- Row 2 - 3 buttons using all space -->
            <Button Grid.Row="1" Grid.Column="0" Name="btnAIToVSNET" Content="Claude to Editor" Click="OnReceiveCodeButtonClick" Style="{StaticResource CustomButtonStyle}"/>
            <Button Grid.Row="1" Grid.Column="1" Name="btnAttachFile" Content="📎Attach File" Click="OnAttachFileButtonClick" Style="{StaticResource CustomButtonStyle}"/>
            <Button Grid.Row="1" Grid.Column="2" Name="btnNewFile" Content="📄 New File" Style="{StaticResource CustomButtonStyle}" Click="OnNewFileButtonClick" Margin="-1,-1,-1,0"/>

            <!-- Row 3 - Using a separate grid with 4 columns for this row -->
            <Grid Grid.Row="2" Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!-- AI Selector dropdown -->
                <ComboBox Grid.Column="0" x:Name="pulldownKi" Cursor="Hand" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}" 
                          Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}" BorderThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center"
                          SelectionChanged="pulldownKI_SelectionChanged" Margin="-1,-1,0,0">
                    <ComboBox.Resources>
                        <Style TargetType="ComboBoxItem">
                            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarHoverOverSelectedKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}"/>
                            <Setter Property="Padding" Value="10,4"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Style>
                        <Style x:Key="ComboBoxToggleButtonStyle" TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ComboBox.Resources>

                    <ComboBox.Style>
                        <Style TargetType="ComboBox">
                            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ComboBox">
                                        <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderThickness="0">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="20"/>
                                                </Grid.ColumnDefinitions>
                                                <ToggleButton Grid.Column="0" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                              Style="{StaticResource ComboBoxToggleButtonStyle}" Background="{TemplateBinding Background}" 
                                                              BorderThickness="0"/>

                                                <ContentPresenter Grid.Column="0" Content="{TemplateBinding SelectionBoxItem}" Margin="5,0" IsHitTestVisible="False" VerticalAlignment="Center"/>
                                                <Path Grid.Column="1" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowTextKey}}" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False"/>
                                                <Popup Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom">
                                                    <Border Background="{DynamicResource {x:Static vsshell:VsBrushes.ComboBoxMouseOverBackgroundMiddle1Key}}" BorderThickness="0">
                                                        <ScrollViewer MaxHeight="200">
                                                            <ItemsPresenter/>
                                                        </ScrollViewer>
                                                    </Border>
                                                </Popup>
                                            </Grid>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ComboBox.Style>
                </ComboBox>

                <Button Grid.Column="1" Name="btnCompleteCodeInAI" Content="Complete Code" Click="OnCompleteCodeButtonClick" Style="{StaticResource CustomButtonStyle}"/>
                <Button Grid.Column="2" Name="btnContinueCode" Content="Continue Code" Click="OnContinueCodeButtonClick" Style="{StaticResource CustomButtonStyle}"/>

                <!-- Column 3: Enable Copy Code checkbox and dropdown button -->
                <Grid Grid.Column="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Border Grid.Column="0" Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}" Margin="0">
                        <CheckBox Style="{StaticResource CustomCheckBoxStyle}" HorizontalAlignment="Center" Name="EnableCopyCodeCheckBox" Click="EnableCopyCodeCheckBox_Click" IsChecked="True" Content="Enable Copy Code" />
                    </Border>

                    <Button Grid.Column="1" Content="▼" Width="26" Style="{StaticResource CustomButtonStyle}" Margin="5,-1,-1,-1">
                        <Button.ContextMenu>
                            <ContextMenu x:Name="CodeActionsContextMenu" FontSize="15" />
                        </Button.ContextMenu>
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                </Grid>
            </Grid>
        </Grid>
    </Grid>
</UserControl>